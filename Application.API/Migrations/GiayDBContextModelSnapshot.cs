// <auto-generated />
using System;
using Application.API.ModelContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.API.Migrations
{
    [DbContext(typeof(GiayDBContext))]
    partial class GiayDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application.Data.Models.Address", b =>
                {
                    b.Property<Guid>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Application.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryID");

                    b.HasIndex("VoucherID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Application.Data.Models.Category_Product", b =>
                {
                    b.Property<Guid>("CategoryProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryProductID");

                    b.ToTable("Category_Products");
                });

            modelBuilder.Entity("Application.Data.Models.Color", b =>
                {
                    b.Property<Guid>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Product_Details_ColorProductDetailsColorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("ColorID");

                    b.HasIndex("Product_Details_ColorProductDetailsColorID");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Application.Data.Models.CustomerSupportTickets", b =>
                {
                    b.Property<Guid>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateBy")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketID");

                    b.HasIndex("UserID");

                    b.ToTable("CustomerSupportTickets");
                });

            modelBuilder.Entity("Application.Data.Models.Image", b =>
                {
                    b.Property<Guid>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductDetailsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Application.Data.Models.InventoryLog", b =>
                {
                    b.Property<Guid>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDateBy")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductDetailsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("QuantityInStock")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Size")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("LogID");

                    b.HasIndex("ProductDetailsID");

                    b.ToTable("InventoryLogs");
                });

            modelBuilder.Entity("Application.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReturnID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<long>("TotalPrice")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("ReturnID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Application.Data.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShippingMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TotalSumPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalUnitPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShippingMethodID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Application.Data.Models.OrderTracking", b =>
                {
                    b.Property<Guid>("TrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ShippingStatus")
                        .HasColumnType("tinyint");

                    b.Property<long>("TrackingNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TrackingID");

                    b.HasIndex("OrderDetailID");

                    b.ToTable("OrderTrackings");
                });

            modelBuilder.Entity("Application.Data.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodID");

                    b.HasIndex("OrderDetailID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Application.Data.Models.PaymentMethodDetail", b =>
                {
                    b.Property<Guid>("PaymentMethodDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<long>("TotalMoney")
                        .HasColumnType("bigint");

                    b.HasKey("PaymentMethodDetailID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PaymentMethodDetails");
                });

            modelBuilder.Entity("Application.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("Product_Details_SizeProductDetailsSizeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductID");

                    b.HasIndex("OrderID");

                    b.HasIndex("Product_Details_SizeProductDetailsSizeID");

                    b.HasIndex("SaleID");

                    b.HasIndex("VoucherID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Application.Data.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("ProductDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ColorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LogID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SizeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WarrantyPeriod")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductDetailsID");

                    b.HasIndex("ColorID");

                    b.HasIndex("ImageID")
                        .IsUnique();

                    b.HasIndex("ProductID");

                    b.HasIndex("SizeID");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("Application.Data.Models.ProductReview", b =>
                {
                    b.Property<Guid>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("RatingStar")
                        .HasColumnType("real");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewID");

                    b.HasIndex("ProductDetailID");

                    b.HasIndex("UserID");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("Application.Data.Models.ProductWarranty", b =>
                {
                    b.Property<Guid>("WarrantyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WarrantyPeriod")
                        .HasColumnType("datetime2");

                    b.HasKey("WarrantyID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductWarranties");
                });

            modelBuilder.Entity("Application.Data.Models.Product_Details_Color", b =>
                {
                    b.Property<Guid>("ProductDetailsColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDetailsID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductDetailsColorID");

                    b.ToTable("Product_Details_Colors");
                });

            modelBuilder.Entity("Application.Data.Models.Product_Details_Size", b =>
                {
                    b.Property<Guid>("ProductDetailsSizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductDetailsSizeID");

                    b.ToTable("Product_Details_Sizes");
                });

            modelBuilder.Entity("Application.Data.Models.Product_Inventory", b =>
                {
                    b.Property<Guid>("ProductInventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LogID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDetailsID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductInventoryID");

                    b.ToTable("Product_Inventorys");
                });

            modelBuilder.Entity("Application.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateRated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RatingStar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Application.Data.Models.Return", b =>
                {
                    b.Property<Guid>("ReturnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RefundAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("ReturnID");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Application.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("User_RoleUserRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleID");

                    b.HasIndex("User_RoleUserRoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Application.Data.Models.Sale", b =>
                {
                    b.Property<Guid>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SaleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SaleID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Application.Data.Models.ShippingMethod", b =>
                {
                    b.Property<Guid>("ShippingMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EstimatedDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MethodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShippingFee")
                        .HasColumnType("bigint");

                    b.HasKey("ShippingMethodID");

                    b.ToTable("ShippingMethods");
                });

            modelBuilder.Entity("Application.Data.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long?>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("QuantityCard")
                        .HasColumnType("int");

                    b.Property<decimal?>("Size")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartID");

                    b.HasIndex("UserID");

                    b.HasIndex("VoucherID");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Application.Data.Models.Size", b =>
                {
                    b.Property<Guid>("SizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Product_Details_SizeProductDetailsSizeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SizeID");

                    b.HasIndex("Product_Details_SizeProductDetailsSizeID");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("Application.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("User_RoleUserRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("User_RoleUserRoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Application.Data.Models.User_Role", b =>
                {
                    b.Property<Guid>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserRoleID");

                    b.ToTable("User_Roles");
                });

            modelBuilder.Entity("Application.Data.Models.Voucher", b =>
                {
                    b.Property<Guid>("VoucherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DiscountPrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("VoucherID");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("CategoryCategory_Product", b =>
                {
                    b.Property<Guid>("CategoriesCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Category_ProductCategoryProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesCategoryID", "Category_ProductCategoryProductID");

                    b.HasIndex("Category_ProductCategoryProductID");

                    b.ToTable("CategoryCategory_Product");
                });

            modelBuilder.Entity("Category_ProductProduct", b =>
                {
                    b.Property<Guid>("Category_ProductsCategoryProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Category_ProductsCategoryProductID", "ProductsProductID");

                    b.HasIndex("ProductsProductID");

                    b.ToTable("Category_ProductProduct");
                });

            modelBuilder.Entity("ProductDetailProduct_Inventory", b =>
                {
                    b.Property<Guid>("ProductDetailsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Product_InventoryProductInventoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductDetailsID", "Product_InventoryProductInventoryID");

                    b.HasIndex("Product_InventoryProductInventoryID");

                    b.ToTable("ProductDetailProduct_Inventory");
                });

            modelBuilder.Entity("Application.Data.Models.Address", b =>
                {
                    b.HasOne("Application.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Data.Models.Category", b =>
                {
                    b.HasOne("Application.Data.Models.Voucher", null)
                        .WithMany("Categories")
                        .HasForeignKey("VoucherID");
                });

            modelBuilder.Entity("Application.Data.Models.Color", b =>
                {
                    b.HasOne("Application.Data.Models.Product_Details_Color", null)
                        .WithMany("Colors")
                        .HasForeignKey("Product_Details_ColorProductDetailsColorID");
                });

            modelBuilder.Entity("Application.Data.Models.CustomerSupportTickets", b =>
                {
                    b.HasOne("Application.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Data.Models.InventoryLog", b =>
                {
                    b.HasOne("Application.Data.Models.Product_Inventory", "Product_Inventory")
                        .WithMany("InventoryLogs")
                        .HasForeignKey("ProductDetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Inventory");
                });

            modelBuilder.Entity("Application.Data.Models.Order", b =>
                {
                    b.HasOne("Application.Data.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.Return", null)
                        .WithMany("Orders")
                        .HasForeignKey("ReturnID");

                    b.HasOne("Application.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Data.Models.OrderDetail", b =>
                {
                    b.HasOne("Application.Data.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Application.Data.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.ShippingMethod", "ShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingMethodID");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ShippingMethod");
                });

            modelBuilder.Entity("Application.Data.Models.OrderTracking", b =>
                {
                    b.HasOne("Application.Data.Models.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Application.Data.Models.PaymentMethod", b =>
                {
                    b.HasOne("Application.Data.Models.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Application.Data.Models.PaymentMethodDetail", b =>
                {
                    b.HasOne("Application.Data.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Application.Data.Models.Product", b =>
                {
                    b.HasOne("Application.Data.Models.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.Product_Details_Size", null)
                        .WithMany("Products")
                        .HasForeignKey("Product_Details_SizeProductDetailsSizeID");

                    b.HasOne("Application.Data.Models.Sale", null)
                        .WithMany("Products")
                        .HasForeignKey("SaleID");

                    b.HasOne("Application.Data.Models.Voucher", null)
                        .WithMany("Products")
                        .HasForeignKey("VoucherID");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Application.Data.Models.ProductDetail", b =>
                {
                    b.HasOne("Application.Data.Models.Product_Details_Color", "Product_Details_Color")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.Image", "Image")
                        .WithOne("ProductDetail")
                        .HasForeignKey("Application.Data.Models.ProductDetail", "ImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.Product_Details_Size", "Product_Details_Size")
                        .WithMany()
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");

                    b.Navigation("Product_Details_Color");

                    b.Navigation("Product_Details_Size");
                });

            modelBuilder.Entity("Application.Data.Models.ProductReview", b =>
                {
                    b.HasOne("Application.Data.Models.ProductDetail", "ProductDetail")
                        .WithMany()
                        .HasForeignKey("ProductDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Data.Models.ProductWarranty", b =>
                {
                    b.HasOne("Application.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Application.Data.Models.Rating", b =>
                {
                    b.HasOne("Application.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Data.Models.Role", b =>
                {
                    b.HasOne("Application.Data.Models.User_Role", null)
                        .WithMany("Roles")
                        .HasForeignKey("User_RoleUserRoleID");
                });

            modelBuilder.Entity("Application.Data.Models.ShoppingCart", b =>
                {
                    b.HasOne("Application.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Application.Data.Models.Size", b =>
                {
                    b.HasOne("Application.Data.Models.Product_Details_Size", null)
                        .WithMany("Sizes")
                        .HasForeignKey("Product_Details_SizeProductDetailsSizeID");
                });

            modelBuilder.Entity("Application.Data.Models.User", b =>
                {
                    b.HasOne("Application.Data.Models.User_Role", null)
                        .WithMany("Users")
                        .HasForeignKey("User_RoleUserRoleID");
                });

            modelBuilder.Entity("CategoryCategory_Product", b =>
                {
                    b.HasOne("Application.Data.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.Category_Product", null)
                        .WithMany()
                        .HasForeignKey("Category_ProductCategoryProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Category_ProductProduct", b =>
                {
                    b.HasOne("Application.Data.Models.Category_Product", null)
                        .WithMany()
                        .HasForeignKey("Category_ProductsCategoryProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductDetailProduct_Inventory", b =>
                {
                    b.HasOne("Application.Data.Models.ProductDetail", null)
                        .WithMany()
                        .HasForeignKey("ProductDetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Data.Models.Product_Inventory", null)
                        .WithMany()
                        .HasForeignKey("Product_InventoryProductInventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Data.Models.Image", b =>
                {
                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Application.Data.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Application.Data.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Application.Data.Models.Product_Details_Color", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Application.Data.Models.Product_Details_Size", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("Application.Data.Models.Product_Inventory", b =>
                {
                    b.Navigation("InventoryLogs");
                });

            modelBuilder.Entity("Application.Data.Models.Return", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Application.Data.Models.Sale", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Application.Data.Models.User", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Application.Data.Models.User_Role", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Application.Data.Models.Voucher", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
